#lang sicp

;;; Exercise 1.28
(define (prime? n) (fast-prime? n 100))

(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((miller-test? n) (fast-prime? n (dec times)))
        (else false)))

(define (miller-test? n)
  (define (expmod base exp m)
  (define square-root (expmod base (/ exp 2) m))
  (cond ((= exp 0) 1)
        ((even? exp)
         (if (and
              (> square-root 1)
              (< square-root (dec n))
              (= (remainder (square square-root) m)) 1)
             0
             (remainder (square square-root) m)))
        (else
         (remainder (* base (expmod base (- exp 1) m))
                    m))))
  (not (= (expmod (+ 1 (random (- n 1))) (dec n) n) 0)))



(define (square n) (* n n))

(prime? 2)
(prime? 3)
(prime? 4)
(prime? 5)
(prime? 6)
(prime? 7)
(newline)
(prime? 561)
(prime? 1105)
(prime? 1729)
(prime? 2465)
(prime? 2821)
(prime? 6601)